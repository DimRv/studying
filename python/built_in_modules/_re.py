"""
re - regular expressions
получение совпадений по шаблону re

Шаблоны соответствующие одному символу:
. - любой символ кроме \n
\d - цифра [0-9]
\D - любой символ крое цифры [^0-9]
\s - любой пробельный символ [\f\n\r\t\v]
\S - любой непробельный символ
\w - любая буква, цифры и _ [0-9a-zA-Zа-яА-ЯёЁ]
\W - любая не буква, не цифра и не смвол _
[..] - один символ из указанных или один из диапазона (примеры [0-9][a-f][A-F]) минус указывается в начале или в конце
[^..] - любой символ кроме перечисленных
\b - начало или конец слова
\B - не граница слова

Квантификаторы (кол-во повторений, следуют за символом):
{n} - ровно n повторений
{m, n} - от m до n повторений включительно
{m, } - не менее m повторений
{, n} - не более n повторений
? - ноль или одно повторение {0,1}
* - ноль или более {0,}
+ - одно или более {1,}
Квантификаторы жадные: захватывают максимально возможное число символов
Символ ? в конце квантификатора делает его ленивым

Скобочные группы (?:...) и перечисления |
| - подходит одному из выражений: морков|св[её]кл

Основные методы модуля re:
re.search(pattern, string) - поиск первого совпадения
re.fullmatch(pattern, string) - проверка, подходит ли указанная строка под шаблон
re.split(pattern, string, maxsplit=0) - разбиение строки по шаблону
re.findall(pattern, string) - поиск всех совпадений
re.finditer(pattern, string) - итератор по всем не пересекающимся шаблонам
re.sub(pattern, repl, string, count) - замена всех непересекающихся шаблонов pattern на repl
re.match(re, text) -
re.match.groups() - список из всех найденных совпадений

Флаги:
re.ASCII - поиск только внутри ASCII-смволов
re.IGNORECASE - не различать заглавные и маленькие буквы
re.MULTILINE - спецсимволы ^ и $ соответствуют началу и концу строки
re.DOTALL - \n входит в символ .
"""


import re

match = re.search(r'\d\d\D\d\d', r'Телефон 123-12-12')
print(match[0] if match else 'Not found')


li = ['Mike studying Python', 'Lisa studying C++']
exp = '(.*) studying (.*)'

for text in li:
    val = re.match(exp, text).groups()
    print(val[0], val[1])
